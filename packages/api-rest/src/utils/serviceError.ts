// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { MetadataBearer } from '@aws-sdk/types';
import {
	HttpResponse,
	parseJsonError as parseAwsJsonError,
} from '@aws-amplify/core/internals/aws-client-utils';
import { ApiErrorResponse } from '@aws-amplify/core/internals/utils';

import { RestApiError } from '../errors';

/**
 * Internal-only method to create a new RestApiError from a service error.
 *
 * @internal
 */
export const buildRestApiServiceError = (
	error: Error & MetadataBearer,
	response?: ApiErrorResponse
): RestApiError & MetadataBearer => {
	const restApiError = new RestApiError({
		name: error?.name,
		message: error.message,
		underlyingError: error,
		response,
	});
	// $metadata is only required for backwards compatibility.
	return Object.assign(restApiError, { $metadata: error.$metadata });
};

export const parseRestApiServiceError = async (
	response: HttpResponse
): Promise<(RestApiError & MetadataBearer) | undefined> => {
	const parsedAwsError = await parseAwsJsonError(response);
	if (!parsedAwsError) {
		// Response is not considered an error.
		return;
	} else {
		/**
		 * Parses both AWS and non-AWS error responses coming from the users' backend code.
		 * * AWS errors generated by the AWS services(e.g. API Gateway, Bedrock). They can be Signature errors,
		 *   ClockSkew errors, etc. These responses will be parsed to errors with proper name and message from the AWS
		 *   services.
		 * * non-AWS errors thrown by the user code. They can contain any headers or body. Users need to access the
		 *   error.response to get the headers and body and parse them accordingly. The JS error name and message will
		 *   be `UnknownError` and `Unknown error` respectively.
		 */
		let bodyText: string | undefined = undefined;
		try {
			bodyText = await response.body?.text();
		} catch (error) {
			// SKIP: error response may not have a body
		}
		return buildRestApiServiceError(parsedAwsError, {
			statusCode: response.statusCode,
			headers: response.headers,
			body: bodyText,
		});
	}
};
